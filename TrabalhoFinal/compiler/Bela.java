/* Bela.java */
/* Generated By:JavaCC: Do not edit this line. Bela.java */
package compiler;
import java.io.*;
import java.util.*;
import ast.*;

public class Bela implements BelaConstants {

    public static void main(String args[]) throws ParseException, IOException {
        if (args.length == 0) {
            System.err.println("Uso: java Bela <arquivo.bela>");
            return;
        }
        Bela analisador = new Bela(new FileInputStream(args[0]));
        Prog prog = analisador.Bela();
        geraCodigo(prog, args[0]);
    }

    public static String mapType(String t) {
        switch(t) {
            case "float": return "float";
            case "bool":  return "boolean";
            case "void":  return "void";
            default:      return t;
        }
    }

    public static void geraCodigo(Prog prog, String arquivo) {
        try {
            String base = new File(arquivo).getName();
            String name = base.contains(".") ? base.substring(0, base.lastIndexOf('.')) : base;
            String javaSrc = prog.toJava(name); // usa nome do arquivo como nome da classe

            File outFile = new File(name + ".java");

            java.nio.file.Files.write(
                outFile.toPath(),
                javaSrc.getBytes(java.nio.charset.StandardCharsets.UTF_8)
            );

            System.out.println("Arquivo Java gerado: " + outFile.getName());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

////////////////////////////////////////////////////////////////////////
  static final public 
Prog Bela() throws ParseException {Prog p; Main m; ArrayList<Fun> funs;
    m = Main();
    funs = Func_Linha();
    jj_consume_token(0);
{if ("" != null) return new Prog(m, new ArrayList<>(funs));}
    throw new Error("Missing return statement in function");
}

  static final public Main Main() throws ParseException {ArrayList<VarDecl> vars; ArrayList<Comando> coms;
    jj_consume_token(MAIN);
    jj_consume_token(LPAR);
    jj_consume_token(RPAR);
    jj_consume_token(LCHAVES);
    vars = VarDeclSeq();
    coms = SeqCmd();
    jj_consume_token(RCHAVES);
{if ("" != null) return new Main(new ArrayList<>(vars), new ArrayList<>(coms));}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<VarDecl> VarDeclSeq() throws ParseException {ArrayList<VarDecl> list = new ArrayList<>(); String type; Token id;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(VAR);
      type = Tipo();
      id = jj_consume_token(ID);
      jj_consume_token(PVIRG);
list.add(new VarDecl(type, id.image));
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  static final public String Tipo() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOAT:{
      t = jj_consume_token(FLOAT);
{if ("" != null) return t.image;}
      break;
      }
    case BOOL:{
      t = jj_consume_token(BOOL);
{if ("" != null) return t.image;}
      break;
      }
    case VOID:{
      t = jj_consume_token(VOID);
{if ("" != null) return t.image;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<Comando> SeqCmd() throws ParseException {ArrayList<Comando> cmds = new ArrayList<>(); Comando c;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINT:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      c = Comando();
cmds.add(c);
    }
{if ("" != null) return cmds;}
    throw new Error("Missing return statement in function");
}

  static final public Comando Comando() throws ParseException {Token id;
    Comando comando;
    Exp e;
    List<Exp> args;
    List<Comando> blk;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      id = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATRIB:{
        jj_consume_token(ATRIB);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case READINPUT:{
          jj_consume_token(READINPUT);
          jj_consume_token(LPAR);
          jj_consume_token(RPAR);
          jj_consume_token(PVIRG);
{if ("" != null) return new CReadInput(id.beginLine, id.image);}
          break;
          }
        case LPAR:
        case TRUE:
        case FALSE:
        case ID:
        case NUM:{
          e = Exp();
          jj_consume_token(PVIRG);
{if ("" != null) return new CAtribuicao(id.beginLine, id.image, e);}
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        if (jj_2_1(2147483647)) {
          jj_consume_token(LPAR);
          args = ExpList();
          jj_consume_token(RPAR);
          jj_consume_token(PVIRG);
{if ("" != null) return new CChamadaFun(id.beginLine, id.image, new ArrayList<>(args));}
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAR:{
            jj_consume_token(LPAR);
args = new ArrayList<>();
            jj_consume_token(RPAR);
            jj_consume_token(PVIRG);
{if ("" != null) return new CChamadaFun(id.beginLine, id.image, new ArrayList<>(args));}
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
      }
    case IF:{
      id = jj_consume_token(IF);
      e = Exp();
      jj_consume_token(THEN);
      jj_consume_token(LCHAVES);
      blk = SeqCmd();
      jj_consume_token(RCHAVES);
      jj_consume_token(PVIRG);
{if ("" != null) return new CIf(id.beginLine, e, new ArrayList<>(blk));}
      break;
      }
    case WHILE:{
      id = jj_consume_token(WHILE);
      e = Exp();
      jj_consume_token(LCHAVES);
      blk = SeqCmd();
      jj_consume_token(RCHAVES);
      jj_consume_token(PVIRG);
{if ("" != null) return new CWhile(id.beginLine, e, new ArrayList<>(blk));}
      break;
      }
    case RETURN:{
      id = jj_consume_token(RETURN);
      e = Exp();
      jj_consume_token(PVIRG);
{if ("" != null) return new CReturn(id.beginLine, e);}
      break;
      }
    case PRINT:{
      id = jj_consume_token(PRINT);
      jj_consume_token(LPAR);
      e = Exp();
      jj_consume_token(RPAR);
      jj_consume_token(PVIRG);
{if ("" != null) return new CPrint(id.beginLine, e);}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Exp Exp() throws ParseException {Exp e1, e2; Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:{
      jj_consume_token(LPAR);
      e1 = Exp();
      op = Op();
      e2 = Exp();
      jj_consume_token(RPAR);
{if ("" != null) return new EOpExp(op.image, e1, e2);}
      break;
      }
    case TRUE:
    case FALSE:
    case ID:
    case NUM:{
      e1 = Fator();
{if ("" != null) return e1;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<Exp> ExpList() throws ParseException {ArrayList<Exp> list = new ArrayList<>(); Exp e;
    e = Exp();
list.add(e);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRG:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRG);
      e = Exp();
list.add(e);
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  static final public Exp Fator() throws ParseException {Token id; Token num; ArrayList<Exp> args;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      id = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:{
        jj_consume_token(LPAR);
        args = ExpList();
        jj_consume_token(RPAR);
{if ("" != null) return new EChamadaFun(id.image, new ArrayList<>(args));}
        break;
        }
      default:
        jj_la1[9] = jj_gen;
{if ("" != null) return new EVar(id.image);}
      }
      break;
      }
    case NUM:{
      num = jj_consume_token(NUM);
{if ("" != null) return new EFloat(Float.parseFloat(num.image));}
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new ETrue();}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new EFalse();}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Token Op() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUM:{
      t = jj_consume_token(SUM);
      break;
      }
    case SUB:{
      t = jj_consume_token(SUB);
      break;
      }
    case MULT:{
      t = jj_consume_token(MULT);
      break;
      }
    case DIV:{
      t = jj_consume_token(DIV);
      break;
      }
    case AND:{
      t = jj_consume_token(AND);
      break;
      }
    case OR:{
      t = jj_consume_token(OR);
      break;
      }
    case LESS:{
      t = jj_consume_token(LESS);
      break;
      }
    case GREATER:{
      t = jj_consume_token(GREATER);
      break;
      }
    case COMP:{
      t = jj_consume_token(COMP);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public Fun Func() throws ParseException {Token id; String retType; ArrayList<ParamFormalFun> params; ArrayList<VarDecl> vars; ArrayList<Comando> body;
    jj_consume_token(FUN);
    retType = Tipo();
    id = jj_consume_token(ID);
    jj_consume_token(LPAR);
    params = ListaArg();
    jj_consume_token(RPAR);
    jj_consume_token(LCHAVES);
    vars = VarDeclSeq();
    body = SeqCmd();
    jj_consume_token(RCHAVES);
{if ("" != null) return new Fun(id.image, new ArrayList<>(params), retType,
                      new ArrayList<>(vars), new ArrayList<>(body));}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<Fun> Func_Linha() throws ParseException {ArrayList<Fun> funs = new ArrayList<>(); Fun f;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUN:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      f = Func();
funs.add(f);
    }
{if ("" != null) return funs;}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<ParamFormalFun> ListaArg() throws ParseException {ArrayList<ParamFormalFun> list = new ArrayList<>(); String type; Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOAT:
    case BOOL:
    case VOID:{
      type = Tipo();
      id = jj_consume_token(ID);
list.add(new ParamFormalFun(type, id.image));
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VIRG:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        jj_consume_token(VIRG);
        type = Tipo();
        id = jj_consume_token(ID);
list.add(new ParamFormalFun(type, id.image));
      }
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_Fator_222_7_18()
 {
    return false;
  }

  static private boolean jj_3R_Fator_221_7_17()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_ExpList_211_7_6()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_ExpList_211_7_6()) return true;
    return false;
  }

  static private boolean jj_3R_Fator_220_5_13()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Fator_221_7_17()) {
    jj_scanpos = xsp;
    if (jj_3R_Fator_222_7_18()) return true;
    }
    return false;
  }

  static private boolean jj_3R_Fator_219_3_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Fator_220_5_13()) {
    jj_scanpos = xsp;
    if (jj_3R_Fator_225_5_14()) {
    jj_scanpos = xsp;
    if (jj_3R_Fator_227_5_15()) {
    jj_scanpos = xsp;
    if (jj_3R_Fator_229_5_16()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Op_238_5_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_ExpList_212_7_8()
 {
    if (jj_scan_token(VIRG)) return true;
    if (jj_3R_Exp_203_5_7()) return true;
    return false;
  }

  static private boolean jj_3R_ExpList_211_7_6()
 {
    if (jj_3R_Exp_203_5_7()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpList_212_7_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_Exp_205_7_10()
 {
    if (jj_3R_Fator_219_3_12()) return true;
    return false;
  }

  static private boolean jj_3R_Fator_229_5_16()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_Fator_227_5_15()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_Exp_203_5_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Exp_203_5_9()) {
    jj_scanpos = xsp;
    if (jj_3R_Exp_205_7_10()) return true;
    }
    return false;
  }

  static private boolean jj_3R_Exp_203_5_9()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_Exp_203_5_7()) return true;
    if (jj_3R_Op_238_5_11()) return true;
    if (jj_3R_Exp_203_5_7()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_Fator_225_5_14()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BelaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x400,0x3800,0x350000,0xc80040,0x8000,0x40,0x350000,0xc00040,0x0,0x40,0xc00000,0xff000000,0x0,0x0,0x3800,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x8,0x18,0x0,0x0,0x8,0x18,0x2,0x0,0x18,0x1,0x4,0x2,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Bela(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Bela(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new BelaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Bela(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new BelaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new BelaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Bela(BelaTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BelaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[37];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 15; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 37; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
